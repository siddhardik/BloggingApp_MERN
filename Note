<!-- 01. API VS Rest API  -->

The primary goal of API is to standardize data exchange between web services. Depending on the type of API, the choice of protocol changes. On the other hand, REST API is an architectural style for building web services that interact via an HTTP protocol.


description: blog app Mern Stack                                
entry point: (index.js) server.js                               
test command:                                                   
git repository: (https://github.com/siddhardik/BloggingApp_MERN.git)
keywords: blog app Mern_Blogging_App
author: Siddhartha Bhunia                                       
license: (ISC)       

02. 
<!-- What is colors in NPM? -->
JavaScript library for immutable color conversion and manipulation with support for CSS color strings. const color = Color('#7743CE'). alpha(0.5). lighten(0.5); 
<!--  Print Colourful messgaes on console  by using colors library  -->

03. morgan is a Node. js and Express middleware to log HTTP requests and errors, and simplifies the process. 

04. cors => What is CORS and why it is used?
Cross-origin resource sharing (CORS) is a mechanism that allows restricted resources on a web page to be requested from another domain outside the domain from which the first resource was served. A web page may freely embed cross-origin images, stylesheets, scripts, iframes, and videos

<!-- react and node server  two server handle by cors  -->


05. dotenv What is the use of dotenv?

Dotenv is a zero-dependency module that loads environment variables from a .env file into process.env . Storing configuration in the environment separate from code is based on The Twelve-Factor App methodology.


06. nodemon => server restarts automatically after once run 

07. The express. json() function is a middleware function used in Express. js applications to parse incoming JSON data from HTTP requests, a standard format for data transmission in web servers. Suppose we have created an API that sends data in JSON format.

08. What is Morgan (' Dev ')?
Morgan is a popular HTTP logging library for Node. js. It is designed to be a simple and flexible tool for logging HTTP requests and responses in Node. js applications. Using Morgan, you can easily log requests made to your Node.
 <!-- 400 -->
09. 400 Bad Request response status code indicates that the server cannot or will not process the request due to something that is perceived to be a client error
<!-- 201  -->
10. the 201 status code is returned in response to a POST request. A POST request is used to submit data to a server to create a new resource. The 201 status code indicates that the server has successfully processed the request, the new resource has been created and is now ready for interaction.

11. What is bcrypt used for?
Bcrypt is a valuable tool to use to hash and store passwords. Its major benefits include: Slow runtime. Bcrypt is a slow-functioning algorithm that takes time to create password hashes and requires time to decrypt them, significantly slowing hacker attempts to break the bcrypt hash.

<!-- 200  -->
12. The HTTP 200 OK success status response code indicates that the request has succeeded. A 200 response is cacheable by default. The meaning of a success depends on the HTTP request method: GET : The resource has been fetched and is transmitted in the message body.

<!-- 500 Internal Server Error -->
12. 500 Internal Server Error

<!-- 404 is a status code that tells a web user that a requested page is not available. -->
13. 404 is a status code that tells a web user that a requested page is not available.

14.  Explain Session 
<!-- const session = await mongoose.startSession(); -->

This line starts a new Mongoose session. Sessions in Mongoose are used to group database operations together, often within a transaction. A session is created and assigned to the session variable.
<!-- session.startTransaction(); -->

This line starts a database transaction within the session. A transaction is a sequence of one or more database operations that are treated as a single unit of work. If any operation within the transaction fails, all changes made within the transaction can be rolled back (undone).
<!-- await newBlog.save({ session }); -->

This line saves a new blog entry (newBlog) to the database. The { session } parameter is passed to the save method to indicate that this save operation is part of the current session and transaction.
<!-- exisitingUser.blogs.push(newBlog); -->

This line adds the newly created newBlog to an array of blogs belonging to an existing user (exisitingUser). This is a common pattern for associating blog entries with users.
<!-- await exisitingUser.save({ session }); -->

This line saves the exisitingUser object, which now includes the newly added blog entry, to the database. Like before, { session } is passed to the save method to ensure it's part of the same session and transaction.
<!-- await session.commitTransaction(); -->

This line commits the transaction. If all the database operations within the transaction were successful, this will save the changes to the database. If any operation failed, this line would not be reached, and the changes would be rolled back.
<!-- await newBlog.save(); -->

This line saves the newBlog entry to the database outside of the transaction. It's important to note that this save operation is not tied to the session or transaction started earlier. It's a separate save operation that will persist the blog entry regardless of the transaction's outcome.








 